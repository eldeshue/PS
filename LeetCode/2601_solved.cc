
/*
	주어진 배열을 오름차순으로 만들어야 함.

	각각의 자리 수에 대해서 소수를 한 번 뺄 수 있음.
	더하기는 불가능함.
		따라서 역방향으로 순회하면서 이전 값과 비교,
			-> 현재 값이 이전 값보다 작으면 continue
			-> 현재 값이 이전 값보다 크면 prime subtraction 수행

	뺄 때, 최대한 작은 소수를 찾아서 빼줘야 함.
		-> 소수들을 에라토스테네스의 채를 돌려서 구한 다음, 이분 탐색(lower bound)을 돌려서 찾는다.
		-> n log(max number)
*/

#include <vector>
using namespace std;

#include <algorithm>
#include <array>
class Solution
{
public:
	static constexpr array<int, 168> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};
	bool primeSubOperation(vector<int> &nums)
	{
		const int N = nums.size();
		for (int i = N - 2; i >= 0; --i)
		{
			if (nums[i] >= nums[i + 1])
			{
				nums[i] -= *lower_bound(primes.begin(), primes.end(), nums[i] - nums[i + 1] + 1);
			}
		}
		return (nums[0] >= 1);
	}
};
