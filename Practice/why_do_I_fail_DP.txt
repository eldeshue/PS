나는 왜 DP에 실패하는가?

1. DP ?
	dp란 동적 계획법의 약자다. dp는 프로그래밍의 패러다임의 일종으로, 유명한 최적화 기법이다.
	근본 사상은 환경주의자와 동일하다. 바로 자원의 재활용이다.
	프로그래머가 운용할 수 있는 자원 2가지 중 하나인 메모리를 추가적으로 투입하여,
	다른 하나인 실행 시간의 이득을 취하는 것이다.
	즉 시간과 메모리 사이의 trade-off, 컴퓨터 자원의 등가성을 활용한 기법이다.
	이러한 dp는 현대 컴퓨터의 저렴한 메모리와 맞물려 더욱 중요하다고 생각한다.

	단적으로 컴퓨터의 메모리 캐싱도 이러한 dp의 일환이라 생각할 수 있다.

	즉 이름과는 무관하며, 개인적으로는 메모리-재활용-극대화 라 이름 붙이고 싶다.

2. 어떤 상황에서 DP를 사용하는가?
	당면한 문제에서 다음의 두 가지 조건이 발견되는 경우 도입을 고려할 수 있다.
		1. 순진한 완전탐색으로는 해답의 탐색에 너무나도 많은 시간이 걸리는 경우.
		2. 탐색의 과정에 중복이 다수 발생하는 경우.

	경험상으로는 다항시간을 넘어가는 경우(팩토리얼, 지수, 등)의 경우에 사용한다.

3. 어떻게 사용하는가? - 잘 알려진 패턴들....


4. 나는 왜 실패하는가?
	1. 무엇이 중복되는가?
	먼저 dp를 도입하고자 했다면, 무엇이 중복되는지를 이해해야 한다.
	사실 무엇이 중복되는지 이해하는 것도 어렵다. 피보나치 등 기초적인 dp는 중복되는 사항이 명시적이다.
	그러나 대부분의 경우 dp의 도입은 최적화의 영역이기에 문제의 겉으로는 dp의 낌새를 알기 어렵다.
	즉 dp를 도입해야 개선이 된다는 사실 자체가 알기 어렵다.

	2. 자료구조 설계
	결국 dp는 기존의 계산 결과를 재활용하는 방법이므로, 이 기존의 계산 결과를 잘 저장해야 한다.
	즉 재활용에 용이한 형태로 자료를 기록해두는게 dp의 성패를 가른다.
	바로 이 재활용 가능한 메모리 구조의 설계가 대단히 비직관적이다.

	일반적으로 문제풀이에서는 다차원 배열을 dp를 위한 cache로 사용한다.
	이 경우 각 차원의 index값에 의미를 부여하여 dp를 수행한다. 여기서 생각이 발전을 안한다.

5.
	모든 알고리즘이 그렇지만, 자주 등장하는 패턴을 일부 학습하고,
	이를 재활용하는 것은 암기, 즉 노력의 영역이다.
	하지만 이러한 암기는 잘 알려진 패턴에서 벗어나면 문제가 된다.
	dp를 자유자재로 사용하기 위해서는

	1.문제를 분석하여 중복된 영역을 파악하는 분석력,
	2. 문제 상황에 적합한 입출력이 가능한 자료구조의 선정이 필요하다.

	1번은 대표적인 문제 분석력이며, 2번은 전형적인 컴퓨팅 사고력을 뜻한다.

	이렇기에 코테에서 dp가 단골로 출제되는게 아닐까???

	======================================================================

	dp를 위한 구조화는 결국 프로그래머의 근본적인 실력을 나타내는 좋은 지표라는 생각이 든다.
	결국 프로그래머의 실력은 그의 생각이 얼마나 컴퓨터 친화적인지가 결정하기 때문.
	dp는 그 응용에 있어서 스스로의 밑천이 제대로 드러나는 영역이라고 생각한다.
	그리고 이러한 컴퓨터 친화적인 생각의 방식은 단기간에 획득이 불가능하다.
	이는 지식이 아니라 지혜의 영역이기 때문이다.

	분명히 누군가는 이러한 생각을 자연스레 한다.
	자라오면서 겪은 모종의 경험이나 혹은 태생적인 뇌구조가 이를 가능케 한다.
	과연 생각하는 방식은 학습이 가능한가? 적어도 나에겐 갈 길이 멀어보인다.

	알고리즘 학습은 프로그래머의 역량을 가장 잘 확인할 수 있어서 코테 등으로 활용된다.
	dp는 상술한 특성 때문에 스스로의 생각 방식 수준을 잘 확인할 수 있는 영역이라 생각한다.
	우리 모두 고수가 되는 그 날까지...

